$public_path: "/academy/static/img/";

@mixin svg-bg-fallback($name, $color: none) {
  background-image: url('#{$public_path}svg-fallbacks/#{$name}.png');
  background-image: #{$color}, url('#{$public_path}svg/#{$name}.svg');
}

@mixin gradientOverlayBottom($height: 100%, $bottom: null, $opacity: null) {
  &:before {
    @include transition(all .5s ease);
    position: absolute;
    content: ' ';
    display: block;
    width: 100%;
    height: #{$height};
    bottom: #{$bottom};
    opacity: #{$opacity};
    z-index: 1;
    background: -moz-linear-gradient(top,  rgba(0,0,0,0) 0%, rgba(0,0,0,0) 29%, rgba(0,0,0,0.55) 61%, rgba(0,0,0,0.99) 99%, rgba(0,0,0,1) 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(top,  rgba(0,0,0,0) 0%,rgba(0,0,0,0) 29%,rgba(0,0,0,0.55) 61%,rgba(0,0,0,0.99) 99%,rgba(0,0,0,1) 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom,  rgba(0,0,0,0) 0%,rgba(0,0,0,0) 29%,rgba(0,0,0,0.55) 61%,rgba(0,0,0,0.99) 99%,rgba(0,0,0,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  }
}

@mixin gradientOverlayTop() {
  &:before {
    position: absolute;
    content: ' ';
    display: block;
    width: 100%;
    height: 100%;
    z-index: 1;
    background: -moz-linear-gradient(bottom,  rgba(0,0,0,0) 0%, rgba(0,0,0,0) 29%, rgba(0,0,0,0.55) 61%, rgba(0,0,0,0.99) 99%, rgba(0,0,0,1) 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(bottom,  rgba(0,0,0,0) 0%,rgba(0,0,0,0) 29%,rgba(0,0,0,0.55) 61%,rgba(0,0,0,0.99) 99%,rgba(0,0,0,1) 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to top,  rgba(0,0,0,0) 0%,rgba(0,0,0,0) 29%,rgba(0,0,0,0.55) 61%,rgba(0,0,0,0.99) 99%,rgba(0,0,0,1) 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
  }
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform($args...) {
  -webkit-transform: $args;
    -moz-transform: $args;
     -ms-transform: $args; /* Only for graceful degradation in IE9, cannot be transitioned */
      -o-transform: $args;
         transform: $args;
}

// _mixins.scss
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
    $max: length($values);
    $px-values: "";
    $rem-values: "";

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $px-values: #{$px-values + $value * 16}px;

        @if $i < $max {
            $px-values: #{$px-values + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $rem-values: #{$rem-values + $value}rem;

        @if $i < $max {
            $rem-values: #{$rem-values + " "};
        }
    }

    #{$property}: $px-values;
    #{$property}: $rem-values;
}

@mixin ie8 () {
  @if $ie8-support {
    @content;
  }
}

@mixin bp($breakpoint, $type: min-width, $ie8: false, $orientation: null) {
    @if $media-queries-supported {

        @if $orientation == null {

            @if map-has-key($breakpoints, $breakpoint) {
                @media ($type:#{map-get($breakpoints, $breakpoint)}) {
                    @content;
                }
            }@else {
                @warn "No value could be retrieved from `#{$breakpoint}`. "
                  + "Please make sure it is defined in `$breakpoints` map. you noob";
            }

        }@else {

            @if map-has-key($breakpoints, $breakpoint) {
                @media ($type:#{map-get($breakpoints, $breakpoint)}) and (orientation: $orientation) {
                    @content;
                }
            }@else {
                @warn "No value could be retrieved from `#{$breakpoint}`. "
                  + "Please make sure it is defined in `$breakpoints` map. you noob";
            }

        }
    }@else {
        @if $ie8 {
            @content;
        }
    }
}

@mixin background-image($url, $position, $size) {
    background-image: url($url);
    background-position: $position;
    background-repeat: no-repeat;
    background-size: $size;
}

@mixin center($horizontal: true, $vertical: true) {
    @if $horizontal and $vertical {
        transform: translate(-50%, -50%);
    } @else if $horizontal {
        transform: translate(-50%, 0);
    } @else if $vertical {
        transform: translate(0, -50%);
    }
}

@function gel($class) {
    @return #{#{"."}#{$gel-namespace}#{$class}};
}

@function palette($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

// sass maps function for z-index usage = z-index: z(key); e.g. z-index: z(overlay);

@function z($key) {
  @if map-has-key($z-layers, $key) {
    @return map-get($z-layers, $key);
  }

  @warn "Unknown `#{$key}` in $z-layers.";
  @return null;
}

.animated {
  animation-duration: 4.5s;
  animation-fill-mode: both;
  animation-iteration-count: infinite;
  -webkit-animation-duration: 4.5s;
  -webkit-animation-fill-mode: both;
  -webkit-animation-iteration-count: infinite;
  -moz-animation-duration: 4.5s;
  -moz-animation-fill-mode: both;
  -moz-animation-iteration-count: infinite;
}

@keyframes pulse {
  0% {transform: scale(1);}
  50% {transform: scale(1.1);}
  100% {transform: scale(1);}
}
.pulse {
  animation-name: pulse;
  animation-duration: 2s;
  -webkit-animation-name: pulse;
  -webkit-animation-duration: 2s;
  -moz-animation-name: pulse;
  -moz-animation-duration: 2s;
}

@mixin ellipsis($max-height: 3.6rem) {
    overflow: hidden;
    position: relative;
    max-height: $max-height;
    text-align: left;
    margin-right: -1rem;
    padding-right: 1rem;

    &:before {
        content: '...';
        position: absolute;
        right: 1rem;
        bottom: 0;
        background: palette(shades, white);
    }

    &:after {
        content: '';
        position: absolute;
        right: 0;
        width: 1em;
        height: 1em;
        margin-top: 0.2em;
        background: white;
    }
}
